print('5')
numberFound = 0
x = 11
while numberFound < 20:
    if x%5==0 and x%7==0 and x%11==0:
        print x
        numberFound = numberFound + 1;
    x = x + 1;


#E6
print('6A:')
def is_prime(n):
    if n%2 == 0 or n < 2: 
        return False
    for i in range(3, int(n**0.5)+1,2):
        if n%i == 0:
            return False
    return True
print(is_prime(3))
print(is_prime(7))
print(is_prime(12))
print('----------------------')


print('6B:')
def is_prime2(n):
    if n==2 or n==3:
        return True
    if n%2 == 0 or n < 2: 
        return False
    for i in range(3, int(n**0.5)+1,2):
        if n%i == 0:
            return False
    return True
print(is_prime2(7))
print('----------------------')

print('6C:')
def nPrimes(n):
    solution = list()
    sieve = [True] * (n+1)
    for p in range(2, n+1):
        if (sieve[p]):
            solution.append(p)
            for i in range(p, n+1, p):
                sieve[i] = False
    return solution
print(nPrimes(20))
print('----------------------')

print('6d:')
def firstNprimes(n):
    primes = []
    count = 2
    while len(primes) != n:
        for i in range(2, count // 2 + 1):
            if count % i == 0:
                break
        else:
            primes.append(count)
        count += 1
    return primes
print(firstNprimes(10))

#7
print("7a:")
def printList():
    list = [2,4,6,8,10]
    for i in (list):
        print (i)
printList()
print('----------------------')

print("\n7b:")
def printListbk():
    list = [2,4,6,8,10]
    for i in reversed(list):
        print(i)
printListbk()
print('----------------------')

print("\n7c:")
def listLength():
    list = [2,4,6,8,10]
    length = 0
    for i in (list):
        length += 1
    print(length)
print("Number of elements in the list: ")
listLength()

#8

#8a
a = [15,63,77,34,23,444,1,100]
print(a)
#8b 
b = a
#8c 
b[1] = 2
#8d
print(a) #a[1] changed since both are pointing to the same object
#8e 
c = a[:]
#8f 
c[2] = 99
#8g
print(a) #change did not occur at a because c is a copy of a but does ot point to the same object

def set_first_elem_to_zero(l):
    l[0] = 0
    return l
lTest = [1,1,2,3,4]
print(set_first_elem_to_zero(lTest)) #The original list changes because the list is read, and then at position l[0] the value is changed to 0. Hence, printing the new statement. 

#9
aList = [[1,3],[3,6]]
def mergeList(l):
    finalList = list()
    for sublist in l:
        for i in sublist:
            finalList.append(i)
    return finalList
print(mergeList(aList))

#10
import matplotlib.pyplot as plt
import math
import numpy as np


x = np.linspace(0, 2, 1024)
y = ((np.sin(x-2)**2)*(np.e**(-x**2)))
plt.plot(x,y)
plt.xlabel('Time')
plt.ylabel('Speed')
plt.title("Exercise 10: Time vs Speed")
plt.show()

#11
exList = [1,2,3,4,5]

def iterationList(l):
    if len(l) == 0:
        return "Empty List"
    product = 1
    for i in l:
        product *= i
    return product
print("Iteration: ")
print(iterationList(exList))

def recursionList(l):
    if len(l) == 1:
        return l[0]
    return recursionList([l[0]]) * recursionList(l[1:])
print("Recursion: ")
print(recursionList(exList))


#12
def recFib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return recFib(n-1) + recFib(n-2)
    return n
print("Recursive Fibonacci: ")
print(recFib(20))

def memoFib(n, _cache={}):
    if n in _cache:
        return _cache[n]
    elif n == 0:
        return 0
    elif n == 1:
        return 1
    elif n > 1:
        return _cache.setdefault(n, memoFib(n-1) + memoFib(n-2))
    return n
print("Memoized Fibonacci: ")
print(memoFib(20))

#13

import re
file = open('emails.txt', 'r')
file = file.read()

emails = re.findall(r'([^ ]+[@][^ ]+[.][a-z]+)', file)
print(emails)
